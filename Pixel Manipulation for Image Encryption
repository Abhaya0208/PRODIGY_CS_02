from PIL import Image
import numpy as np

def encrypt_image(input_path, output_path, key):
    """
    Encrypts an image by applying XOR operation and pixel manipulation.

    Args:
        input_path (str): Path to the input image.
        output_path (str): Path to save the encrypted image.
        key (int): Encryption key.
    """
    # Open the image
    img = Image.open(input_path)
    img_array = np.array(img)

    # Apply XOR operation for encryption
    encrypted_array = img_array ^ key

    # Swap pixels (simple row/column swapping for extra security)
    encrypted_array = encrypted_array[::-1, ::-1]

    # Save the encrypted image
    encrypted_img = Image.fromarray(encrypted_array)
    encrypted_img.save(output_path)
    print(f"Image encrypted and saved at {output_path}")


def decrypt_image(input_path, output_path, key):
    """
    Decrypts an image by reversing the XOR operation and pixel manipulation.

    Args:
        input_path (str): Path to the encrypted image.
        output_path (str): Path to save the decrypted image.
        key (int): Encryption key.
    """
    # Open the encrypted image
    img = Image.open(input_path)
    img_array = np.array(img)

    # Reverse pixel swapping
    decrypted_array = img_array[::-1, ::-1]

    # Reverse XOR operation for decryption
    decrypted_array = decrypted_array ^ key

    # Save the decrypted image
    decrypted_img = Image.fromarray(decrypted_array)
    decrypted_img.save(output_path)
    print(f"Image decrypted and saved at {output_path}")


# Example usage
if __name__ == "__main__":
    import os

    # Specify paths and key
    input_image = r"""C:\Users\ridhi\Downloads\original image.jpeg"""  # Replace with your input image path
    encrypted_image = r"""C:\Users\ridhi\Downloads\encrypted image.jpeg"""
    decrypted_image = r"""C:\Users\ridhi\Downloads\decrypted image.jpeg"""
    key = 123  # Key must be an integer (0-255)

    if os.path.exists(input_image):
        # Encrypt the image
        encrypt_image(input_image, encrypted_image, key)

        # Decrypt the image
        decrypt_image(encrypted_image, decrypted_image, key)
    else:
        print(f"Input image '{input_image}' not found!")
